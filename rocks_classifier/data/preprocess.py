"""Preprocess the extracted dataset, to be ready to trained.

Performs the following:-
1. Rename and move files to data/2_processed.
2. List files other than jpg and png, to remove unsupported files.
3. List file by types before cleaning.
4. Remove
    - Bad Images
    - Duplicate Images
    - Misclassified Images
    - Unsupported Images
    - Corrupted Images
5. List file by types after cleaning.
6. Get count of files by class types.
7. Handle Imbalance using Undersampling, Oversampling.
"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/02_a_preprocess_data.ipynb.

# %% auto 0
__all__ = ['process_data']

# %% ../../notebooks/02_a_preprocess_data.ipynb 5
import os
import requests
import subprocess
import logging
import hydra, omegaconf

from .utils import *

# %% ../../notebooks/02_a_preprocess_data.ipynb 9
_doc_ = """Preprocess the extracted dataset, to be ready to trained.

Performs the following:-
1. Rename and move files to data/2_processed.
2. List files other than jpg and png, to remove unsupported files.
3. List file by types before cleaning.
4. Remove
    - Bad Images
    - Duplicate Images
    - Misclassified Images
    - Unsupported Images
    - Corrupted Images
5. List file by types after cleaning.
6. Get count of files by class types.
7. Handle Imbalance using Undersampling, Oversampling.
"""

# %% ../../notebooks/02_a_preprocess_data.ipynb 33
@hydra.main(config_path=".", config_name="config", version_base="1.2")
def process_data(cfg):
    """Remove unsupported and corrupted images, and splits data into train, val and test.

    Steps -> `download_and_move_datasets` -> `move_to_processed` -> 'find_filepaths' -> `clean_images` -> `sampling`

    Parameters
    ----------
    cfg : cfg (omegaconf.DictConfig):
        Hydra Configuration
    """
    move_to_processed()

    print("\n\nFiles other than jpg and png.\n")
    files, _ = find_filepaths("data/2_processed/")
    print(
        "\n".join(
            list(
                filter(lambda x: not x.endswith("jpg") and not x.endswith("png"), files)
            )
        )
    )

    print("\nFile types before cleaning:")
    get_value_counts("data/2_processed")

    clean_images(cfg)

    print("\nFile types after cleaning:")
    get_value_counts("data/2_processed")

    print("\nCounts of classes:\n")
    get_value_counts("data/2_processed", column="class")

    sampling(cfg)
